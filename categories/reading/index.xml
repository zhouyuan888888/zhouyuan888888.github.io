<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reading on Just Coding</title>
    <link>https://nkcoder.github.io/categories/reading/</link>
    <description>Recent content in reading on Just Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Feb 2020 21:29:37 +0800</lastBuildDate><atom:link href="https://nkcoder.github.io/categories/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读书笔记系列一:《重构-改善既有代码的设计》</title>
      <link>https://nkcoder.github.io/posts/reading/refactor-reading-notes/</link>
      <pubDate>Wed, 19 Feb 2020 21:29:37 +0800</pubDate>
      
      <guid>https://nkcoder.github.io/posts/reading/refactor-reading-notes/</guid>
      <description>首先推荐下重构-改善既有代码的设计这本书，中文版翻译还可以，最近读了两遍，将其中的重点提取为读书笔记，关于其中每一项的详细解释和示例请参阅原书。
什么是重构（refactoring） 名词：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。
动词：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。
重构的目的是使软件更容易被理解和修改。你可以在软件内部做很多修改，但必须对软件可观察的外部行为只造成很小变化，或甚至不造成变化。
为什么重构 重构改进软件设计
如果没有重构，程序的设计会逐渐腐败变质。重构很像是在整理代码，其改进设计的一个重要方向就是消除重复代码。
重构使软件更容易理解
除了计算机，我们编写的代码，更多的是给将来的程序员，甚至是我们自己看的。在重构上花一点时间，可以让代码更好地表达自己的意图。重构还可以帮助我们理解不熟悉的代码。
重构帮助找到 bug
对代码进行重构，可以加深对代码和程序结构的理解，有助于找到 bug。
重构提高编程速度
重构可以帮助改进软件设计，而良好的设计是快速开发的根本。
何时重构 重构本来就不是一件应该特别拨出时间做的事情，重构应该随时随地进行。你不应该为重构而重构，你之所以重构，是因为你想做别的什么事，而重构可以帮助你把那些事做好。
事不过三
第一次做某件事时只管去做；第二次做类似的事会产生反感，但无论如何还是可以去做；第三次再做类似的事，你就应该重构。
添加新功能时重构
一个动机是重构可以帮助理解需要修改的代码；另一个动机是代码当前的设计无法帮助我轻松添加所需要的功能。
修复错误时重构
收到 bug 报告，就是需要重构的信号，因为代码没有清晰到可以一眼看出 bug 所在。
代码评审（code review）时重构
代码评审对于编写清晰代码很重要，也会让更多人有机会提出更多的建议。
 对于今天的工作，我了解得很充分；对于明天的工作，我了解得不够充分。但如果我纯粹只是为今天工作，明天我将完全无法工作。
 代码的坏味道 重复代码（Duplicated Code）
如果你在一个以上的地点看到相同的程序结构，那么可以肯定：设法将它们合而为一，程序会变得更好。
过长函数（Long Method）
我们遵循这样一条原则：每当感觉需要以注释来说明点什么的时候，我们就把需要说明的东西写进一个独立函数中，并以其用途（而非实现手法）命名。我们可以对一组甚至短短一行代码做这件事。哪怕替换后的函数调用动作比函数自身还长，只要函数名称能够解释其用途，我们也该毫不犹豫地那么做。关键不在于函数的长度，而在于函数“做什么”和“如何做”之间的语义距离。
如何确定该提炼哪一段代码呢? 一个很好的技巧是：寻找注释。它们通常能指出代码用途和实现手法之间的语义距离。如果代码前方有一行注释，就是在提醒你：可以将这段代码替换成一个函数，而且可以在注释的基础上给这个函数命名。就算只有一行代码，如果它需要以注释来说明，那也值得将它提炼到独立函数去。
过大的类（Long Class）
如果想利用单个类做太多事情，其内往往就会出现太多实例变量。一旦如此，重复代码也就接踵而至了。
过长参数列（Long Parameter List）
太多参数会造成前后不一致、不易使用，而且一旦你需要更多数据，就不得不修改它。如果将对象传递给函数，大多数修改都将没有必要，因为你很可能只需（在函数内）增加一两条请求，就能得到更多数据。
发散式变化（divergent change）
某个类经常因为不同的原因在不同的方向上发生变化。
霰弹式修改（shortgun surgery）
如果每遇到某种变化，你都必须在许多不同的类内做出许多小修改。
依恋情结（feature envy）
函数对某个类的兴趣高过对自己所处类的兴趣，这种孺慕之情最通常的焦点便是数据。无数次经验里，我们看到某个函数为了计算某个值，从另一个对象那儿调用几乎半打的取值函数。
数据泥团（Data Clumps）
两个类中相同的字段，许多函数签名中相同的参数，这些总是绑在一起出现的数据应该有自己的对象。
基本类型偏执（primitive obsession）
在小任务上运用小对象，比如：结合数值和币种的 money 类、由一个起始值和一个结束值组成的 range 类、电话号码或邮政编码（ZIP）等的特殊字符串。
switch语句</description>
    </item>
    
  </channel>
</rss>
